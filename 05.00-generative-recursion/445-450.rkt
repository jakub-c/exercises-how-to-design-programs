#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.7 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(1
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(2
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(3
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 77 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Fira Code\0"
0 13 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 154 194 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 225 221 223 0 0 0 -1
-1 2 37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 225 221 223 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 239 174 107 0 0 0 -1
-1 2 38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 239 174 107 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 112 114 138 0 0 0 -1
-1 2 38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 112 114 138 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 180 255 255 0 0 0 -1
-1 2 36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 180 255 255 0 0 0 -1
-1 2 16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
48 #"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 100 149 237 41 42 43 -1 -1
0 42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 50 205 50 41 42 43 -1 -1 4
1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 152 251 152 0 0 0
-1 -1 0 1 #"\0"
0 75 10 #"Fira Code\0"
0.0 13 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 255 255
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 154 194
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 57 89 216 0
0 0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 100 149 237
41 42 43 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 50 205 50 41
42 43 -1 -1 18 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 26 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 47 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 49 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 16 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
0 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1           0 765 0 4 3 85
(4
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(5
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 188
(6
 #"#reader(lib \"htdp-intermediate-lambda-reader.ss\" \"lang\")((modnam"
 #"e 445-451) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #"
 #"(#t constructor repeating-decimal #f #t none #f () #f)))"
) 0 0 4 29 1 #"\n"
0 0 18 3 44 #"; [Number -> Number] Number Number -> Number"
0 0 26 29 1 #"\n"
0 0 18 3 53
#"; determines R such that f has a root in [R,(+ R \316\265)]"
0 0 26 29 1 #"\n"
0 0 18 3 25 #"; assume f is continuous "
0 0 26 29 1 #"\n"
0 0 18 3 62
#"; (2) (or (<= (f left) 0 (f right)) (<= (f right) 0 (f left)))"
0 0 26 29 1 #"\n"
0 0 18 3 54 #"; generative divides interval in half, the root is in "
0 0 26 29 1 #"\n"
0 0 18 3 47 #"; one of the two halves, picks according to (2)"
0 0 26 29 1 #"\n"
0 0 18 3 37 #"; (define (find-root f left right) 0)"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 56 #"; ==================== Exercise 445 ===================="
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 18 #"; Number -> Number"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 4 #"poly"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 1 #"*"
0 0 26 3 2 #" ("
0 0 14 3 1 #"-"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 1 #" "
0 0 23 3 1 #"2"
0 0 26 3 3 #") ("
0 0 14 3 1 #"-"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 1 #" "
0 0 23 3 1 #"4"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 2 #"\316\265"
0 0 26 3 1 #" "
0 0 23 3 5 #"0.001"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 15 #"within-EPSILON?"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 3 #") ("
0 0 14 3 2 #"or"
0 0 26 3 2 #" ("
0 0 14 3 2 #"<="
0 0 26 3 2 #" ("
0 0 14 3 4 #"poly"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #") "
0 0 23 3 1 #"0"
0 0 26 3 1 #" "
0 0 14 3 2 #"\316\265"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 33 #"                                ("
0 0 14 3 2 #"<="
0 0 26 3 1 #" "
0 0 14 3 2 #"\316\265"
0 0 26 3 2 #" ("
0 0 14 3 4 #"poly"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #") "
0 0 23 3 1 #"0"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 26 3 2 #" ("
0 0 14 3 9 #"find-root"
0 0 26 3 1 #" "
0 0 14 3 4 #"poly"
0 0 26 3 1 #" "
0 0 23 3 1 #"2"
0 0 26 3 1 #" "
0 0 23 3 1 #"4"
0 0 26 3 2 #") "
0 0 23 3 1 #"2"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 26 3 2 #" ("
0 0 14 3 9 #"find-root"
0 0 26 3 1 #" "
0 0 14 3 4 #"poly"
0 0 26 3 1 #" "
0 0 23 3 1 #"4"
0 0 26 3 1 #" "
0 0 23 3 1 #"2"
0 0 26 3 2 #") "
0 0 23 3 1 #"4"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 14 3 15 #"check-satisfied"
0 0 26 3 2 #" ("
0 0 14 3 9 #"find-root"
0 0 26 3 1 #" "
0 0 14 3 4 #"poly"
0 0 26 3 1 #" "
0 0 23 3 1 #"3"
0 0 26 3 1 #" "
0 0 23 3 1 #"6"
0 0 26 3 2 #") "
0 0 14 3 15 #"within-EPSILON?"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 39 #"; for polynomial `(* (- x 2) (- x 4)))`"
0 0 26 29 1 #"\n"
0 0 18 3 2 #"; "
0 0 26 29 1 #"\n"
0 0 18 3 82
(7
 #"; | step  | left | f left | right   | f right       | mid      | f m"
 #"id           |"
) 0 0 26 29 1 #"\n"
0 0 18 3 82
(8
 #"; | ----- | ---- | ------ | ------- | ------------- | -------- | ---"
 #"------------ |"
) 0 0 26 29 1 #"\n"
0 0 18 3 82
(9
 #"; | n = 1 | 3    | -1     | 6.00    | 8.00          | 4.50     | 1.2"
 #"5            |"
) 0 0 26 29 1 #"\n"
0 0 18 3 82
(10
 #"; | n = 2 | 3    | -1     | 4.5     | 1.25          | 3.75     | -0."
 #"4375         |"
) 0 0 26 29 1 #"\n"
0 0 18 3 82
(11
 #"; | n = 3 | 3    | -1     | 3.75    | -0.4375       | 3.375    | -0."
 #"859375       |"
) 0 0 26 29 1 #"\n"
0 0 18 3 82
(12
 #"; | n = 4 | 3    | -1     | 3.375   | -0.859375     | 3.1875   | -0."
 #"96484375     |"
) 0 0 26 29 1 #"\n"
0 0 18 3 82
(13
 #"; | n = 5 | 3    | -1     | 3.1875  | -0.96484375   | 3.09375  | -0."
 #"9912109375   |"
) 0 0 26 29 1 #"\n"
0 0 18 3 82
(14
 #"; | n = 6 | 3    | -1     | 3.09375 | -0.9912109375 | 3.046875 | -0."
 #"997802734375 |"
) 0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 56 #"; =================== End of exercise =================="
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 44 #"; [Number -> Number] Number Number -> Number"
0 0 26 29 1 #"\n"
0 0 18 3 53
#"; determines R such that f has a root in [R,(+ R \316\265)]"
0 0 26 29 1 #"\n"
0 0 18 3 25 #"; assume f is continuous "
0 0 26 29 1 #"\n"
0 0 18 3 65
#"; assume (or (<= (f left) 0 (f right)) (<= (f right) 0 (f left)))"
0 0 26 29 1 #"\n"
0 0 18 3 68
#"; generative divides interval in half, the root is in one of the two"
0 0 26 29 1 #"\n"
0 0 18 3 40 #"; halves, picks according to assumption "
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 9 #"find-root"
0 0 26 3 1 #" "
0 0 14 3 1 #"f"
0 0 26 3 1 #" "
0 0 14 3 4 #"left"
0 0 26 3 1 #" "
0 0 14 3 5 #"right"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"    [("
0 0 14 3 2 #"<="
0 0 26 3 2 #" ("
0 0 14 3 1 #"-"
0 0 26 3 1 #" "
0 0 14 3 5 #"right"
0 0 26 3 1 #" "
0 0 14 3 4 #"left"
0 0 26 3 2 #") "
0 0 14 3 2 #"\316\265"
0 0 26 3 2 #") "
0 0 14 3 4 #"left"
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"     ("
0 0 16 3 5 #"local"
0 0 26 3 3 #" (("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 3 #"mid"
0 0 26 3 2 #" ("
0 0 14 3 1 #"/"
0 0 26 3 2 #" ("
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 14 3 4 #"left"
0 0 26 3 1 #" "
0 0 14 3 5 #"right"
0 0 26 3 2 #") "
0 0 23 3 1 #"2"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 14 #"             ("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 5 #"f@mid"
0 0 26 3 2 #" ("
0 0 14 3 1 #"f"
0 0 26 3 1 #" "
0 0 14 3 3 #"mid"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"         [("
0 0 14 3 2 #"or"
0 0 26 3 2 #" ("
0 0 14 3 2 #"<="
0 0 26 3 2 #" ("
0 0 14 3 1 #"f"
0 0 26 3 1 #" "
0 0 14 3 4 #"left"
0 0 26 3 2 #") "
0 0 23 3 1 #"0"
0 0 26 3 1 #" "
0 0 14 3 5 #"f@mid"
0 0 26 3 3 #") ("
0 0 14 3 2 #"<="
0 0 26 3 1 #" "
0 0 14 3 5 #"f@mid"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 2 #" ("
0 0 14 3 1 #"f"
0 0 26 3 1 #" "
0 0 14 3 4 #"left"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ("
0 0 14 3 9 #"find-root"
0 0 26 3 1 #" "
0 0 14 3 1 #"f"
0 0 26 3 1 #" "
0 0 14 3 4 #"left"
0 0 26 3 1 #" "
0 0 14 3 3 #"mid"
0 0 26 3 2 #")]"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"         [("
0 0 14 3 2 #"or"
0 0 26 3 2 #" ("
0 0 14 3 2 #"<="
0 0 26 3 1 #" "
0 0 14 3 5 #"f@mid"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 2 #" ("
0 0 14 3 1 #"f"
0 0 26 3 1 #" "
0 0 14 3 5 #"right"
0 0 26 3 4 #")) ("
0 0 14 3 2 #"<="
0 0 26 3 2 #" ("
0 0 14 3 1 #"f"
0 0 26 3 1 #" "
0 0 14 3 5 #"right"
0 0 26 3 2 #") "
0 0 23 3 1 #"0"
0 0 26 3 1 #" "
0 0 14 3 5 #"f@mid"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ("
0 0 14 3 9 #"find-root"
0 0 26 3 1 #" "
0 0 14 3 1 #"f"
0 0 26 3 1 #" "
0 0 14 3 3 #"mid"
0 0 26 3 1 #" "
0 0 14 3 5 #"right"
0 0 26 3 7 #")]))]))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 55 #"; ==================== Exercise 446 ==================="
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 18 #"; see tests in 445"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 56 #"; =================== End of exercise =================="
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 55 #"; ==================== Exercise 447 ==================="
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 31 #"; (find-root poly 1 5) returns "
0 8          10 18 10 #"8191/4096\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 26 29 1 #"\n"
0 0 18 3 42 #"; would we ever get to 2 the actual value?"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 55 #"; =================== End of exercise ================="
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 55 #"; ==================== Exercise 448 ==================="
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 39 #"; Q: The find-root algorithm terminates"
0 0 26 29 1 #"\n"
0 0 18 3 8 #";    for"
0 0 18 3 1 #" "
0 0 18 3 3 #"all"
0 0 18 3 2 #" ("
0 0 18 3 10 #"continuous"
0 0 18 3 2 #") "
0 0 18 3 22 #"f, left, and right for"
0 0 26 29 1 #"\n"
0 0 18 3 10 #";    which"
0 0 18 3 1 #" "
0 0 18 3 3 #"the"
0 0 18 3 1 #" "
0 0 18 3 10 #"assumption"
0 0 18 3 46 #" holds. Why? Formulate a termination argument."
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 59
#"; A: If we keep diviting by 2 we will eventually get to the"
0 0 26 29 1 #"\n"
0 0 18 3 51 #";    values small enough that would satisfy EPSILON"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 17 #"termination-steps"
0 0 26 3 1 #" "
0 0 14 3 8 #"distance"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 5 #"local"
0 0 26 3 3 #" (("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 6 #"search"
0 0 26 3 1 #" "
0 0 14 3 8 #"distance"
0 0 26 3 1 #" "
0 0 14 3 5 #"steps"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 13 #"            ("
0 0 16 3 4 #"cond"
0 0 26 3 3 #" [("
0 0 14 3 2 #"<="
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 1 #" "
0 0 14 3 8 #"distance"
0 0 26 3 1 #" "
0 0 14 3 2 #"\316\265"
0 0 26 3 2 #") "
0 0 14 3 5 #"steps"
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 19 #"                  ["
0 0 14 3 4 #"else"
0 0 26 3 2 #" ("
0 0 14 3 6 #"search"
0 0 26 29 1 #"\n"
0 0 26 3 26 #"                         ("
0 0 14 3 1 #"/"
0 0 26 3 1 #" "
0 0 14 3 8 #"distance"
0 0 26 3 1 #" "
0 0 23 3 1 #"2"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 26 #"                         ("
0 0 14 3 4 #"add1"
0 0 26 3 1 #" "
0 0 14 3 5 #"steps"
0 0 26 3 6 #"))])))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 6 #"search"
0 0 26 3 1 #" "
0 0 14 3 8 #"distance"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 73
(15
 #"; for number 10 we'll need 14 steps to get to smaller than or equal "
 #"to \316\265"
) 0 0 26 29 1 #"\n"
0 0 18 3 47 #"; calculated by function (termination-steps 10)"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 55 #"; =================== End of exercise ================="
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 55 #"; ==================== Exercise 449 ==================="
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 26 3 2 #" ("
0 0 14 3 12 #"find-root.v2"
0 0 26 3 1 #" "
0 0 14 3 4 #"poly"
0 0 26 3 1 #" "
0 0 23 3 1 #"2"
0 0 26 3 1 #" "
0 0 23 3 1 #"4"
0 0 26 3 2 #") "
0 0 23 3 1 #"2"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 26 3 2 #" ("
0 0 14 3 12 #"find-root.v2"
0 0 26 3 1 #" "
0 0 14 3 4 #"poly"
0 0 26 3 1 #" "
0 0 23 3 1 #"4"
0 0 26 3 1 #" "
0 0 23 3 1 #"2"
0 0 26 3 2 #") "
0 0 23 3 1 #"4"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 14 3 15 #"check-satisfied"
0 0 26 3 2 #" ("
0 0 14 3 12 #"find-root.v2"
0 0 26 3 1 #" "
0 0 14 3 4 #"poly"
0 0 26 3 1 #" "
0 0 23 3 1 #"3"
0 0 26 3 1 #" "
0 0 23 3 1 #"6"
0 0 26 3 2 #") "
0 0 14 3 15 #"within-EPSILON?"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 12 #"find-root.v2"
0 0 26 3 1 #" "
0 0 14 3 1 #"f"
0 0 26 3 1 #" "
0 0 14 3 4 #"left"
0 0 26 3 1 #" "
0 0 14 3 5 #"right"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"    [("
0 0 14 3 2 #"<="
0 0 26 3 2 #" ("
0 0 14 3 1 #"-"
0 0 26 3 1 #" "
0 0 14 3 5 #"right"
0 0 26 3 1 #" "
0 0 14 3 4 #"left"
0 0 26 3 2 #") "
0 0 14 3 2 #"\316\265"
0 0 26 3 2 #") "
0 0 14 3 4 #"left"
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"     ("
0 0 16 3 5 #"local"
0 0 26 3 3 #" (("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 3 #"mid"
0 0 26 3 2 #" ("
0 0 14 3 1 #"/"
0 0 26 3 2 #" ("
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 14 3 4 #"left"
0 0 26 3 1 #" "
0 0 14 3 5 #"right"
0 0 26 3 2 #") "
0 0 23 3 1 #"2"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 14 #"             ("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 5 #"f@mid"
0 0 26 3 2 #" ("
0 0 14 3 1 #"f"
0 0 26 3 1 #" "
0 0 14 3 3 #"mid"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 14 #"             ("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 6 #"f-left"
0 0 26 3 2 #" ("
0 0 14 3 1 #"f"
0 0 26 3 1 #" "
0 0 14 3 4 #"left"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 14 #"             ("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 7 #"f-right"
0 0 26 3 2 #" ("
0 0 14 3 1 #"f"
0 0 26 3 1 #" "
0 0 14 3 5 #"right"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"         [("
0 0 14 3 2 #"or"
0 0 26 3 2 #" ("
0 0 14 3 2 #"<="
0 0 26 3 1 #" "
0 0 14 3 6 #"f-left"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 1 #" "
0 0 14 3 5 #"f@mid"
0 0 26 3 3 #") ("
0 0 14 3 2 #"<="
0 0 26 3 1 #" "
0 0 14 3 5 #"f@mid"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 1 #" "
0 0 14 3 6 #"f-left"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ("
0 0 14 3 9 #"find-root"
0 0 26 3 1 #" "
0 0 14 3 1 #"f"
0 0 26 3 1 #" "
0 0 14 3 4 #"left"
0 0 26 3 1 #" "
0 0 14 3 3 #"mid"
0 0 26 3 2 #")]"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"         [("
0 0 14 3 2 #"or"
0 0 26 3 2 #" ("
0 0 14 3 2 #"<="
0 0 26 3 1 #" "
0 0 14 3 5 #"f@mid"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 1 #" "
0 0 14 3 7 #"f-right"
0 0 26 3 3 #") ("
0 0 14 3 2 #"<="
0 0 26 3 1 #" "
0 0 14 3 7 #"f-right"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 1 #" "
0 0 14 3 5 #"f@mid"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ("
0 0 14 3 9 #"find-root"
0 0 26 3 1 #" "
0 0 14 3 1 #"f"
0 0 26 3 1 #" "
0 0 14 3 3 #"mid"
0 0 26 3 1 #" "
0 0 14 3 5 #"right"
0 0 26 3 7 #")]))]))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 55 #"; =================== End of exercise ================="
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 55 #"; ==================== Exercise 450 ==================="
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 26 3 2 #" ("
0 0 14 3 12 #"find-root.v3"
0 0 26 3 1 #" "
0 0 14 3 4 #"poly"
0 0 26 3 1 #" "
0 0 23 3 1 #"2"
0 0 26 3 1 #" "
0 0 23 3 1 #"4"
0 0 26 3 2 #") "
0 0 23 3 1 #"2"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 14 3 15 #"check-satisfied"
0 0 26 3 2 #" ("
0 0 14 3 12 #"find-root.v3"
0 0 26 3 1 #" "
0 0 14 3 4 #"poly"
0 0 26 3 1 #" "
0 0 23 3 1 #"3"
0 0 26 3 1 #" "
0 0 23 3 1 #"6"
0 0 26 3 2 #") "
0 0 14 3 15 #"within-EPSILON?"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 53 #"; assume f is  f is monotonically increasing that is:"
0 0 26 29 1 #"\n"
0 0 18 3 2 #"; "
0 0 18 3 1 #"("
0 0 18 3 2 #"<="
0 0 18 3 2 #" ("
0 0 18 3 1 #"f"
0 0 18 3 1 #" "
0 0 18 3 1 #"a"
0 0 18 3 3 #") ("
0 0 18 3 1 #"f"
0 0 18 3 1 #" "
0 0 18 3 1 #"b"
0 0 18 3 3 #")) "
0 0 18 3 5 #"holds"
0 0 18 3 1 #" "
0 0 18 3 8 #"whenever"
0 0 18 3 2 #" ("
0 0 18 3 1 #"<"
0 0 18 3 1 #" "
0 0 18 3 1 #"a"
0 0 18 3 1 #" "
0 0 18 3 1 #"b"
0 0 18 3 7 #") holds"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 12 #"find-root.v3"
0 0 26 3 1 #" "
0 0 14 3 1 #"f"
0 0 26 3 1 #" "
0 0 14 3 4 #"left"
0 0 26 3 1 #" "
0 0 14 3 5 #"right"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"    [("
0 0 14 3 2 #"<="
0 0 26 3 2 #" ("
0 0 14 3 1 #"-"
0 0 26 3 1 #" "
0 0 14 3 5 #"right"
0 0 26 3 1 #" "
0 0 14 3 4 #"left"
0 0 26 3 2 #") "
0 0 14 3 2 #"\316\265"
0 0 26 3 2 #") "
0 0 14 3 4 #"left"
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"     ("
0 0 16 3 5 #"local"
0 0 26 3 3 #" (("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 3 #"mid"
0 0 26 3 2 #" ("
0 0 14 3 1 #"/"
0 0 26 3 2 #" ("
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 14 3 4 #"left"
0 0 26 3 1 #" "
0 0 14 3 5 #"right"
0 0 26 3 2 #") "
0 0 23 3 1 #"2"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 14 #"             ("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 5 #"f@mid"
0 0 26 3 2 #" ("
0 0 14 3 1 #"f"
0 0 26 3 1 #" "
0 0 14 3 3 #"mid"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 14 #"             ("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 6 #"f-left"
0 0 26 3 2 #" ("
0 0 14 3 1 #"f"
0 0 26 3 1 #" "
0 0 14 3 4 #"left"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 14 #"             ("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 7 #"f-right"
0 0 26 3 2 #" ("
0 0 14 3 1 #"f"
0 0 26 3 1 #" "
0 0 14 3 5 #"right"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ("
0 0 14 3 9 #"find-root"
0 0 26 3 1 #" "
0 0 14 3 1 #"f"
0 0 26 3 1 #" "
0 0 14 3 4 #"left"
0 0 26 3 1 #" "
0 0 14 3 3 #"mid"
0 0 26 3 5 #"))]))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 55 #"; =================== End of exercise ================="
0           0
